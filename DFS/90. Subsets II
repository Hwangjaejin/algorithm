class Solution {
public:
    
    vector<vector<int>> ans;
    vector<int> temp;
    bool visited[12];
    
    void dfs(int idx, int cnt, int target, vector<int>& nums){
        if(cnt == target){
            ans.push_back(temp);
            return;
        }
        for(int i = idx; i < nums.size(); i++){
            if(visited[i]) continue;
            visited[i] = true;
            temp.push_back(nums[i]);
            dfs(i, cnt+1, target, nums);
            temp.pop_back();
            visited[i] = false;
            while(i + 1 < nums.size() && nums[i] == nums[i+1]) i++;
        }
    }
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        
        for(int i = 0; i <= nums.size(); i++){
            temp.clear();
            memset(visited,false,sizeof(visited));
            dfs(0, 0, i, nums);
        }
        return ans;
        
    }
};
