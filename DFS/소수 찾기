#include <string>
#include <vector>
#include <algorithm>
#include <cmath>
using namespace std;
bool visit[11];
string s = "";
vector<int> v;

bool isPrime(int n) {
	if (n == 0 || n == 1) return false;
	for (int i = 2; i <= sqrt(n); i++) {
		if (n%i == 0) return false;
	}
	return true;
}

void dfs(int target_size, int idx, int cnt, string numbers) {
	if (target_size == cnt) {
		v.push_back(stoi(s));
		return;
	}
	
	for (int i = 0; i < numbers.size(); i++) { 
		if (visit[i]) continue;
		visit[i] = true;
		s.push_back(numbers[i]);
		dfs(target_size, i, cnt + 1, numbers);
		visit[i] = false;
		s.pop_back();
	}
}

int solution(string numbers) {
    int answer = 0;
    
    for (int i = 1; i <= numbers.size(); i++) {
		dfs(i, 0, 0, numbers);
	}
    sort(v.begin(),v.end());
    v.erase(unique(v.begin(), v.end()), v.end());
    
    for(int i = 0; i< v.size();i++){
        if(isPrime(v[i])) answer++;
    }
    return answer;
}
