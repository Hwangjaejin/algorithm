class Solution {
public:
 
    bool dfs(int node, vector<vector<int>>& graph, vector<int>& visited, vector<int>& result){
        visited[node] = 1;
        
        for(int i = 0; i < graph[node].size(); i++){
            if(visited[graph[node][i]] == 1) return false;
            if(visited[graph[node][i]] == 0){
                if(!dfs(graph[node][i], graph, visited, result)) return false;
            }
        }
        visited[node] = 2;
        result.push_back(node);
        return true;
    }
    vector<int> findOrder(int num, vector<vector<int>>& pre) {
        
        vector<vector<int>> graph(num);
        vector<int> visited(num, 0);
        vector<int> result;
        
        for(int i = 0; i < pre.size(); i++){
            graph[pre[i][0]].push_back(pre[i][1]);
        }
        
        bool flag = true;
        for(int i = 0; i < num; i++){
            if(visited[i] == 0){
                if(!dfs(i, graph, visited, result)){
                    flag = false;
                    break;
                }   
            }
        }
        if(!flag) return vector<int>();
        return result;
    }
};
