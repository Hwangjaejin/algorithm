class Solution {
public:
    
    int m,n;
    int dx[4] = {0,0,1,-1};
    int dy[4] = {1,-1,0,0};
    
    void bfs(int i, int j, vector<vector<char>>& grid){
        queue<pair<int,int>> q;
        q.push({i,j});
        grid[i][j] = '0';
        
        while(!q.empty()){
            int x = q.front().first;
            int y = q.front().second;
            
            q.pop();
            
            for(int k = 0; k < 4; k++){
                int nx = x + dx[k];
                int ny = y + dy[k];
                
                if(nx < 0 || ny < 0 || nx >= m || ny >= n) continue;
                if(grid[nx][ny] == '0') continue;
                grid[nx][ny] = '0';
                q.push({nx,ny});
            }
        }
    }
    int numIslands(vector<vector<char>>& grid) {
        int answer = 0;
        
        m = grid.size();
        n = grid[0].size();
        
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == '1'){
                    answer++;
                    bfs(i,j,grid);
                }
            }
        }
        return answer;
    }
};
