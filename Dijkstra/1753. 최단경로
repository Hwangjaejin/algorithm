#include <bits/stdc++.h>
using namespace std;

#define INF 987654321
using ll = long long;
int dx[4] = { 0,0,1,-1 }; // 동 서 남 북
int dy[4] = { 1,-1,0,0 };

vector<pair<int, int>> v[20002];
int dist[20002];
void dijkstra(int start) {
	dist[start] = 0;
	priority_queue <pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
	pq.push({ 0,start });

	while (!pq.empty()) {
		int current = pq.top().second;
		int cost = pq.top().first;

		pq.pop();

		if (dist[current] < cost) continue;
		for (int i = 0; i < v[current].size(); i++) {
			int next = v[current][i].first;
			int n_cost = v[current][i].second + cost;

			if (dist[next] > n_cost) {
				dist[next] = n_cost;
				pq.push({ n_cost, next });
			}
		}
	}
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	
	int V, E, K;

	cin >> V >> E >> K;

	for (int i = 1; i <= V; i++) {
		dist[i] = INF;
	}
	for (int i = 0; i < E; i++) {
		int a, b, c;
		cin >> a >> b >> c;

		v[a].push_back({ b,c });
	}

	dijkstra(K);

	for (int i = 1; i <= V; i++) {
		if (dist[i] == INF) cout << "INF" << '\n';
		else cout << dist[i] << '\n';
	}
	return 0;
}
